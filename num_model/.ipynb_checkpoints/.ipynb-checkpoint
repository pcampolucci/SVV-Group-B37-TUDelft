{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import control as c\n",
    "import complete_par as par\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "C1 = np.matrix([[(par.CYbdot-2*par.mub)*par.b/par.V0, 0, 0, 0],\n",
    "                [0, -par.b/(2*par.V0), 0, 0],\n",
    "                [0,0, -2*par.mub*par.KX2*(par.b**2)/(par.V0**2), 2*par.mub*par.KXZ*(par.b**2)/(par.V0**2)],\n",
    "                [par.Cnbdot*(par.b)/(par.V0), 0, 2*par.mub*par.KXZ*(par.b**2)/(par.V0**2), -2*par.mub*par.KZ2* (par.b**2)/(par.V0**2)]])\n",
    "C2 =  np.matrix([[par.CYb, par.CL, par.CYp*(par.b)/(2*par.V0), (par.CYr-4*par.mub)*(par.b)/(2*par.V0)],\n",
    "                  [0, 0, 1, 0],\n",
    "                  [par.Clb, 0, par.Clp*(par.b)/(2*par.V0), par.Clr*(par.b)/(2*par.V0) ],\n",
    "                  [par.Cnb, 0, par.Cnp*(par.b)/(2*par.V0), par.Cnr*(par.b)/(2*par.V0) ]])\n",
    "C3 =  np.matrix([[par.CYda, par.CYdr],\n",
    "                  [0, 0],\n",
    "                  [par.Clda, par.Cldr],\n",
    "                  [par.Cnda, par.Cndr]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "C1_inv = np.linalg.inv(C1)\n",
    "C2_inv = np.linalg.inv(C2)\n",
    "\n",
    "A = - np.matmul(C1_inv, C2)\n",
    "B = - np.matmul(C2_inv, C3)\n",
    "\n",
    "C = np.matrix([[1, 0, 0, 0],\n",
    "               [0, 1, 0, 0],\n",
    "               [0, 0, 1, 0],\n",
    "               [0, 0, 0, 1]])\n",
    "D = np.matrix([[0, 0], [0, 0], [0, 0], [0, 0]])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A = [[-3.00816147e-01  9.81000000e-02 -9.70020572e-04 -9.72893669e-01]\n",
      " [-0.00000000e+00 -0.00000000e+00  1.25699202e+01 -0.00000000e+00]\n",
      " [-1.28250854e+01 -0.00000000e+00 -7.57119639e+00  2.41637958e+00]\n",
      " [ 7.47992406e+00 -0.00000000e+00 -6.47979702e-01 -8.69032844e-01]]\n",
      "\n",
      "B = [[  4.63450603   1.39863378]\n",
      " [384.98823758  60.58934143]\n",
      " [ -0.          -0.        ]\n",
      " [ 37.37013561   5.77178497]]\n",
      "\n",
      "C = [[1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 0. 1.]]\n",
      "\n",
      "D = [[0. 0.]\n",
      " [0. 0.]\n",
      " [0. 0.]\n",
      " [0. 0.]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "t_sim = 120\n",
    "dt_sim = 0.05\n",
    "num_dts = int(t_sim/dt_sim)\n",
    "t = np.linspace(0,t_sim, num_dts)\n",
    "sys = c.ss(A,B,C,D)\n",
    "print(sys)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3.84988238e+02 3.85418815e+02 3.86527230e+02 ... 8.28017435e+07\n",
      " 8.32272233e+07 8.36548894e+07]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.634506028879076\n"
     ]
    }
   ],
   "source": [
    "sys_response = c.impulse_response(sys, t)\n",
    "# print('u', sys_response[1][0][-1],'a', sys_response[1][1][-1],'t', sys_response[1][2][-1],'q', sys_response[1][3][-1],)\n",
    "print(sys_response[1][1])\n",
    "plt.plot(sys_response[0], sys_response[1][0])\n",
    "plt.show()\n",
    "print(sys_response[1][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
