
from Moment_coefs_calc import *

Veq_tilde_ = np.linspace(0,100,1000)    # To plot a continuous function


""" Import thrust data generated by thrust.exe """
thrusts_m3 =  np.loadtxt('measurement_3_thrust.dat')
thrusts_m3s = np.loadtxt('measurement_3s_thrust.dat')
thrusts_m3 = thrusts_m3[:,0] + thrusts_m3[:, 1]
thrusts_m3s = thrusts_m3s[:,0] + thrusts_m3s[:, 1]

""" Determine Thrust Coefficient and Standard Thrust Coefficient """
CTs_m3 = thrusts_m3/(0.5*measurement_3s.rhos*measurement_3s.VTASs**2*D**2)
CTs_m3s = thrusts_m3s/(0.5*measurement_3s.rhos*measurement_3s.VTASs**2*D**2)

def_star = measurement_3.des - 1/Cmd*CmTc*(CTs_m3s - CTs_m3)        # Reduced Deflection

W = []
for t in measurement_3.timestamps:
    update_fuel_balance(t)
    W.append(components['TM'].weight())

Veq_tilde = measurement_3.VEASs*np.sqrt(Ws/np.array(W))             # Reduced Equivalent Velocity
Fe_star = measurement_3.Fes*Ws/W                                    # Reduced Force Stick

""" Regression of datapoints obtained for both plots"""
A = np.vstack([1/Veq_tilde**2, np.ones(len(Veq_tilde))]).T
a_, b_ = np.linalg.lstsq(A, def_star, rcond=None)[0]

def_star_ = b_ + a_/Veq_tilde_**2                                   # Reconstructed Elevator Deflection


A = np.vstack([Veq_tilde**2, np.ones(len(Veq_tilde))]).T
a_, b_ = np.linalg.lstsq(A, Fe_star, rcond=None)[0]

Fe_star_ = b_ + a_*Veq_tilde_**2                                    # Reconstructed Force Stick


""" Plot """
plt.scatter(Veq_tilde, def_star)
plt.scatter(Veq_tilde, measurement_3.des)
plt.plot(Veq_tilde_, def_star_)
plt.ylim(np.max(def_star)+.1,np.min(def_star)-.1)
plt.xlabel('Ve* [-]')
plt.ylabel('de* [-]')
plt.title('de* - Ve*')
plt.grid()
plt.axhline(y=0, color='k')
plt.axvline(x=0, color='k')
plt.show()

plt.scatter(Veq_tilde, Fe_star)
plt.scatter(Veq_tilde, measurement_3.Fes)
plt.plot(Veq_tilde_, Fe_star_)
plt.ylim(np.max(Fe_star)+.1,np.min(Fe_star)-.1)
plt.xlabel('Ve* [-]')
plt.ylabel('Fe* [-]')
plt.title('Fe* - Ve*')
plt.grid()
plt.axhline(y=0, color='k')
plt.axvline(x=0, color='k')
plt.show()